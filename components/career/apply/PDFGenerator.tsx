"use client";

import React from "react";
import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
  pdf,
} from "@react-pdf/renderer";
import { Job } from "@/types/job";
import { ApplicationData, getPDFFileName } from "@/utils/pdfGenerator";

const styles = StyleSheet.create({
  page: {
    padding: 30,
    fontSize: 11,
    fontFamily: "Times-Roman",
    lineHeight: 1.3,
    color: "#000",
  },
  header: {
    marginBottom: 25,
    borderBottom: "2px solid #000",
    paddingBottom: 12,
  },
  headerContent: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "flex-start",
  },
  headerLeft: {
    flex: 1,
  },
  headerRight: {
    textAlign: "right",
    fontSize: 10,
    color: "#333",
  },
  name: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#000",
    marginBottom: 8,
    fontFamily: "Times-Bold",
  },
  headline: {
    fontSize: 14,
    color: "#333",
    fontStyle: "italic",
    marginTop: 4,
  },
  contactGrid: {
    flexDirection: "row",
    marginTop: 15,
    justifyContent: "space-between",
  },
  contactLeft: {
    flex: 1,
    marginRight: 30,
  },
  contactRight: {
    flex: 1,
    marginLeft: 30,
  },
  contactText: {
    marginBottom: 4,
    fontSize: 10,
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 14,
    fontWeight: "bold",
    color: "#000",
    borderBottom: "1px solid #ccc",
    paddingBottom: 3,
    marginBottom: 12,
    fontFamily: "Times-Bold",
    textTransform: "uppercase",
  },
  experienceItem: {
    marginBottom: 12,
  },
  experienceHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 4,
  },
  experienceTitle: {
    fontSize: 13,
    fontWeight: "bold",
    flex: 1,
    fontFamily: "Times-Bold",
  },
  experienceDates: {
    fontSize: 10,
    color: "#333",
    fontStyle: "italic",
  },
  company: {
    fontSize: 11,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 3,
  },
  industry: {
    fontSize: 10,
    color: "#666",
    marginBottom: 4,
    fontStyle: "italic",
  },
  summary: {
    textAlign: "justify",
    fontSize: 10,
    lineHeight: 1.4,
  },
  educationItem: {
    marginBottom: 12,
  },
  educationHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 4,
  },
  schoolName: {
    fontSize: 13,
    fontWeight: "bold",
    flex: 1,
    fontFamily: "Times-Bold",
  },
  educationDates: {
    fontSize: 10,
    color: "#333",
    fontStyle: "italic",
  },
  degree: {
    fontSize: 11,
    fontWeight: "bold",
    marginBottom: 3,
  },
  fieldOfStudy: {
    fontSize: 10,
    color: "#666",
  },
  coverLetter: {
    textAlign: "justify",
    whiteSpace: "pre-wrap",
    fontSize: 10,
    lineHeight: 1.4,
  },
  applicationDetails: {
    marginBottom: 20,
  },
  detailItem: {
    marginBottom: 8,
    fontSize: 10,
  },
  documentsList: {
    marginTop: 8,
  },
  documentItem: {
    marginLeft: 15,
    marginBottom: 3,
    fontSize: 10,
  },
  footer: {
    textAlign: "center",
    fontSize: 9,
    color: "#666",
    borderTop: "1px solid #ccc",
    paddingTop: 8,
    marginTop: 25,
  },
  footerLink: {
    color: "#333",
    marginTop: 3,
  },
  bulletPoint: {
    marginLeft: 15,
    marginBottom: 2,
    fontSize: 10,
  },
  boldText: {
    fontWeight: "bold",
    fontFamily: "Times-Bold",
  },
  italicText: {
    fontStyle: "italic",
  },
  smallText: {
    fontSize: 9,
  },
});

const ApplicationDocument = ({
  applicationData,
  job,
}: {
  applicationData: ApplicationData;
  job: Job;
}) => (
  <Document>
    <Page size="A4" style={styles.page}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerContent}>
          <View style={styles.headerLeft}>
            <Text style={styles.name}>
              {applicationData.personalInfo.firstName}{" "}
              {applicationData.personalInfo.lastName}
            </Text>
            {applicationData.personalInfo.headline && (
              <Text style={styles.headline}>
                {applicationData.personalInfo.headline}
              </Text>
            )}
          </View>
          <View style={styles.headerRight}>
            <Text style={[styles.boldText, { marginBottom: 3 }]}>
              CODE HUDDLE
            </Text>
            <Text style={styles.smallText}>Generated by</Text>
            <Text style={[styles.smallText, { color: "#333" }]}>
              www.code-huddle.com
            </Text>
          </View>
        </View>

        {/* Contact Information */}
        <View style={styles.contactGrid}>
          <View style={styles.contactLeft}>
            <View style={styles.contactText}>
              <Text>
                <Text style={styles.boldText}>Email: </Text>
                {applicationData.personalInfo.email}
              </Text>
            </View>
            <View style={styles.contactText}>
              <Text>
                <Text style={styles.boldText}>Phone: </Text>
                {applicationData.personalInfo.countryCode}{" "}
                {applicationData.personalInfo.phone}
              </Text>
            </View>
          </View>
          <View style={styles.contactRight}>
            <View style={styles.contactText}>
              <Text style={styles.boldText}>Address:</Text>
            </View>
            <Text style={styles.contactText}>
              {applicationData.personalInfo.address}
            </Text>
          </View>
        </View>
      </View>

      {/* Professional Summary */}
      {applicationData.summary && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>PROFESSIONAL SUMMARY</Text>
          <Text style={styles.summary}>{applicationData.summary}</Text>
        </View>
      )}

      {/* Experience */}
      {applicationData.experience.some((exp) => exp.title.trim()) && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>PROFESSIONAL EXPERIENCE</Text>
          {applicationData.experience.map(
            (exp, index) =>
              exp.title.trim() && (
                <View key={exp.id || index} style={styles.experienceItem}>
                  <View style={styles.experienceHeader}>
                    <Text style={styles.experienceTitle}>{exp.title}</Text>
                    <Text style={styles.experienceDates}>
                      {exp.startDate} -{" "}
                      {exp.isCurrent ? "Present" : exp.endDate}
                    </Text>
                  </View>
                  {exp.company && (
                    <Text style={styles.company}>{exp.company}</Text>
                  )}
                  {exp.industry && (
                    <Text style={styles.industry}>{exp.industry}</Text>
                  )}
                  {exp.summary && (
                    <Text style={styles.summary}>{exp.summary}</Text>
                  )}
                </View>
              )
          )}
        </View>
      )}

      {/* Education */}
      {applicationData.education.some((edu) => edu.school.trim()) && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>EDUCATION</Text>
          {applicationData.education.map(
            (edu, index) =>
              edu.school.trim() && (
                <View key={edu.id || index} style={styles.educationItem}>
                  <View style={styles.educationHeader}>
                    <Text style={styles.schoolName}>{edu.school}</Text>
                    <Text style={styles.educationDates}>
                      {edu.startDate} -{" "}
                      {edu.isCurrent ? "Present" : edu.endDate}
                    </Text>
                  </View>
                  {edu.degree && (
                    <Text style={styles.degree}>{edu.degree}</Text>
                  )}
                  {edu.fieldOfStudy && (
                    <Text style={styles.fieldOfStudy}>{edu.fieldOfStudy}</Text>
                  )}
                </View>
              )
          )}
        </View>
      )}

      {/* Cover Letter */}
      {applicationData.coverLetter && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>COVER LETTER</Text>
          <Text style={styles.coverLetter}>{applicationData.coverLetter}</Text>
        </View>
      )}

      {/* Application Details */}
      <View style={styles.applicationDetails}>
        <Text style={styles.sectionTitle}>APPLICATION DETAILS</Text>
        <View style={styles.detailItem}>
          <Text>
            <Text style={styles.boldText}>Position Applied: </Text>
            {job.title}
          </Text>
        </View>
        <View style={styles.detailItem}>
          <Text>
            <Text style={styles.boldText}>Company: </Text>
            Code Huddle
          </Text>
        </View>
        <View style={styles.detailItem}>
          <Text>
            <Text style={styles.boldText}>Application Date: </Text>
            {new Date().toLocaleDateString("en-US", {
              weekday: "short",
              year: "numeric",
              month: "short",
              day: "numeric",
            })}
          </Text>
        </View>
        {applicationData.documents.length > 0 && (
          <View style={styles.documentsList}>
            <Text style={[styles.boldText, { marginTop: 8 }]}>
              Attached Documents:
            </Text>
            {applicationData.documents.map((doc, index) => (
              <Text key={index} style={styles.documentItem}>
                â€¢ {doc.name}
              </Text>
            ))}
          </View>
        )}
      </View>

      {/* Footer */}
      <View style={styles.footer}>
        <Text>
          This application was generated by Code Huddle - Professional Job
          Application System
        </Text>
        <Text style={styles.footerLink}>www.code-huddle.com</Text>
      </View>
    </Page>
  </Document>
);

export async function generateApplicationPDF(
  applicationData: ApplicationData,
  job: Job
) {
  try {
    // Generate PDF blob
    const blob = await pdf(
      <ApplicationDocument applicationData={applicationData} job={job} />
    ).toBlob();

    // Create download link
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = getPDFFileName(applicationData, job);

    // Trigger download
    document.body.appendChild(link);
    link.click();

    // Cleanup
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error("Error generating PDF:", error);
    throw error;
  }
}
